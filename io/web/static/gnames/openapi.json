{
  "openapi": "3.0.0",
  "info": {
    "title": "Global Names Verifier API",
    "description": "This RESTful API matches (reconciles and resolves) putative name-strings with known scientific names.\nTo be able to match spelling variants, it uses 'canonical forms` of names.\nIt is a multistage match, a failure transfers algorithm to the next stage.\nIt tries exact, fuzzy match, partial exact and partial fuzzy matches.\nAPI uses data from more than 100 sources of scientific names (>20 million name-strings).\n\nFeature requests and bug reports -`https://github.com/gnames/gnames/issues`\n\nFor end-users there is a client to this API - GNverifier, a web-based and command line application.\n\nWeb - `https://verifier.globalnames.org`\n\nCommand Line - `https://github.com/gnames/gnverifier/releases/latest`\n",
    "contact": {
      "name": "Dmitry Mozzherin",
      "url": "https://github.com/dimus",
      "email": "dmozzherin@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://verifier.globalnames.org/api/v1",
      "description": "Production gnames service"
    },
    {
      "url": "https://virtserver.swaggerhub.com/dimus/gnames/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/ping": {
      "get": {
        "responses": {
          "200": {
            "description": "Use this endpoint to see if service is running.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "pong"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "responses": {
          "200": {
            "description": "The version of the gnames app.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        }
      }
    },
    "/data_sources": {
      "get": {
        "responses": {
          "200": {
            "description": "An array with biodiversity data-aggregators metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSources"
                }
              }
            }
          }
        }
      }
    },
    "/data_sources/{id}": {
      "get": {
        "description": "Provides metadata about a specific data-source.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of a data-source.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metdata about requested data-source.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSource"
                }
              }
            }
          }
        }
      }
    },
    "/verifications": {
      "post": {
        "description": "Verifies an array of strings against known scientific names.",
        "requestBody": {
          "description": "- An array of strings to verify.\n- An array of preferred data-sources to verify against.\n- A flag to return all matches per data-source.\n- A flag to capitalize first letter.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "An array of verification results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verifications"
                }
              }
            }
          }
        }
      }
    },
    "/verifications/{names}": {
      "get": {
        "description": "Verifies an array of strings separated by '|' character.",
        "parameters": [
          {
            "name": "names",
            "in": "path",
            "description": "Strings to verify (separated by '|' character).",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "Pomatomus soltator|Bubo bubo"
            }
          },
          {
            "name": "pref_sources",
            "in": "query",
            "description": "Array of preferred data-sources IDs separated by '|'.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "1|12"
            }
          },
          {
            "name": "all_matches",
            "in": "query",
            "description": "Return all found matches per data-source, not only the best one.\nWorks only with preferred sources, ignores best result.\n",
            "required": false,
            "explode": true,
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "name": "capitalize",
            "in": "query",
            "description": "Capitalizes the first letter of a name-string.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of verification results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verifications"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Version": {
        "required": [
          "build",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version number.",
            "example": "v0.3.7"
          },
          "build": {
            "type": "string",
            "description": "The compilation timestamp.",
            "example": "2020-11-26_17:39:49UTC"
          }
        },
        "description": "The version number and build time of the `gnames` app."
      },
      "DataSources": {
        "type": "array",
        "description": "A list of biodiversity data-sources aggregated by `gnames`.",
        "items": {
          "$ref": "#/components/schemas/DataSource"
        }
      },
      "DataSource": {
        "required": [
          "curation",
          "id",
          "recordCount",
          "title",
          "titleShort",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "An identifier associated with the data-source\nin gnames database. This ID is intended\nto be stable through the lifespan of\nGlobalNames project.\n",
            "example": 1
          },
          "uuid": {
            "type": "string",
            "description": "UUID v4 that is associated with the data-source.\nThis UUID is a global identifier of the\ndata-source in the context of GlobalNames.\n",
            "example": "d4df2968-4257-4ad9-ab81-bedbbfb25e2a"
          },
          "title": {
            "type": "string",
            "description": "The name of the data-source.",
            "example": "The Catalogue of Life"
          },
          "titleShort": {
            "type": "string",
            "description": "A simplified/abbreviated name of the data-source. It can be\nused in outputs without worrying about excessively long names\nof data-sources.\n",
            "example": "Catalogue of Life"
          },
          "version": {
            "type": "string",
            "description": "The version of a data-source according to data-provider.",
            "example": "August 2020 Edition"
          },
          "revisionDate": {
            "type": "string",
            "description": "An information when the data-source was updated according\nto the data-provider. The value would follow one of the following\nformats\n- year-month-day\n- year-month\n- year\n",
            "example": "2020-08"
          },
          "doi": {
            "type": "string",
            "description": "Digital Object Identifier",
            "example": "10.15468/rffz4x"
          },
          "citation": {
            "type": "string",
            "description": "A citation representing the data-source.",
            "example": "Species 2000 & ITIS Catalogue of Life: 2019, Catalogue of Life"
          },
          "authors": {
            "type": "string",
            "description": "Authors of the data-source.",
            "example": "F. Bisby et al"
          },
          "description": {
            "type": "string",
            "description": "A summary describing the resource.",
            "example": "This release of the Catalogue of Life contains contributions from 172 databases with information on 1,867,817 species"
          },
          "homeURL": {
            "type": "string",
            "description": "A website of the data-source.",
            "example": "http://www.catalogueoflife.org/"
          },
          "isOutlinkReady": {
            "type": "boolean",
            "description": "The flag is true if the data-source has enough data and metadata\nto be recommended for outlinking. If the flag is false, it does\nnot mean that the original data-source is not good, it means\nthat its representation at gnames is not complete/recent enough.\n",
            "example": true
          },
          "curation": {
            "type": "string",
            "description": "This field indicates an approximate amount of effort\nspent on verification of the data aggregated\nin the data-source. There are 3 levels\n- `NotCurated`\n- `AutoCurated`\n- `Curated`\n\nIf this flag has a `NotCurated` value, it does not mean that\noriginal data-source is not curated, rather it means the curation\nlevel is not known to `gnames`.\n",
            "example": "Curated"
          },
          "recordCount": {
            "type": "integer",
            "description": "The number of records harvested from the data-source.",
            "example": 3927925
          },
          "updatedAt": {
            "type": "string",
            "description": "A timestamp of the last data-source harvest by gnames.",
            "example": "2020-06-15T00:58:02.000+0000"
          }
        },
        "description": "Metadata about a biodiversity data-aggregator."
      },
      "VerifyParams": {
        "required": [
          "nameStrings"
        ],
        "type": "object",
        "properties": {
          "nameStrings": {
            "type": "array",
            "example": [
              "Pomatomus soltator",
              "Bubo bubo (Linnaeus, 1758)"
            ],
            "items": {
              "type": "string",
              "description": "A name-string to be verified."
            }
          },
          "preferredSources": {
            "type": "array",
            "example": [
              1,
              12,
              169
            ],
            "items": {
              "type": "integer",
              "description": "The identifiers of the data-sources that are important for the\nuser. Normally, only the \"best result\" is returned. If there are\npreferred data-sources, their results will be always returned\nas well (if there is a match).\n\nIf the value is [0], the results for all matched sources is returned.\nSuch resuts are sorted by score.\n",
              "example": 1
            }
          },
          "withAllMatches": {
            "type": "boolean",
            "description": "If \"true\", returns all found matches per source, not just the best match.\nResults are still sorted by score. It works only for results from preferred sources.\n",
            "example": false
          },
          "withCapitalization": {
            "type": "boolean",
            "description": "If this flag is \"true\", name-strings that start with low-case\nletter will be capitalized.\n",
            "example": false
          }
        },
        "description": "Parameters for verification of name-strings."
      },
      "Verifications": {
        "type": "array",
        "description": "An array of verification results.",
        "items": {
          "$ref": "#/components/schemas/Verification"
        }
      },
      "Verification": {
        "required": [
          "curation",
          "dataSourcesNum",
          "input",
          "inputId",
          "matchType"
        ],
        "type": "object",
        "properties": {
          "inputId": {
            "type": "string",
            "description": "An UUID v5 generated from the input string using \"globalnames.org\"\nDNS domain name as a seed. This UUID can be used as\na distributed global unique identifier of the string and\ncan be created independently in any popular programming language.\n",
            "format": "uuid",
            "example": "2284b0d6-d965-5c39-ace5-3ef673da6691"
          },
          "input": {
            "type": "string",
            "description": "An input name-string entered for the verification.",
            "example": "Pomatomus soltator"
          },
          "matchType": {
            "type": "string",
            "description": "Indicates the quality of verification.\n- `NoMatch` (no matched name found)\n- `Exact` (exact match to a canonical form or a verbatim string)\n- `Fuzzy` (fuzzy match to a canonical form)\n- `PartialExact` (match after removing last or middle epithets)\n- `PartialFuzzy` (fuzzy partial match after removing some parts)\n",
            "example": "Fuzzy"
          },
          "bestResult": {
            "$ref": "#/components/schemas/ResultData"
          },
          "preferredResults": {
            "type": "array",
            "description": "Matched records found in preferred data-sources.",
            "items": {
              "$ref": "#/components/schemas/ResultData"
            }
          },
          "dataSourcesNum": {
            "type": "integer",
            "description": "The number of data-sources where the string had a\nmatch to a scientific name.\n",
            "example": 12
          },
          "curation": {
            "type": "string",
            "description": "The best curation level from matched\ndata-sources. Possible values are\n- `NotCurated`\n- `AutoCurated`\n- `Curated`\n\nIf this flag has a `NotCurated` value, it does not mean that\noriginal data-source is not curated, rather it means the curation\nlevel is not known to `gnames`.\n",
            "example": "Curated"
          },
          "error": {
            "type": "string",
            "description": "Normally an empty string. In case of an unexpected error, \nit will be shown here. If error is not empty, it means\nthat matching failed because of a bug in the system.\n"
          }
        },
        "description": "Verification result for a particular input name-string."
      },
      "ResultData": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "integer",
            "description": "An ID of the data-source where the match was found. This is a\nlocal ID at GlobalNames and it has been stable for more than\n10 years.\n",
            "example": 1
          },
          "dataSourceTitleShort": {
            "type": "string",
            "description": "A simplified/abbreviated title of the data-source.",
            "example": "Catalogue of Life"
          },
          "curation": {
            "type": "string",
            "description": "A curation level for the record's data-source. If data-source\nis known to be curated, there is less risk of misspelling of the\nmatched name.\n",
            "example": "Curated"
          },
          "recordId": {
            "type": "string",
            "description": "The record ID of the `matchedName` from the data-source.\nIf the data-source does not provide record ID, the ID is\ngenerated by `gnames` and is prepended with a 'gn_' prefix.\n",
            "example": "TX123"
          },
          "globalId": {
            "type": "string",
            "description": "A globally unique record ID (UUID, LSID, DOI etc).",
            "example": "2284b0d6-d965-5c39-ace5-3ef673da6691"
          },
          "localId": {
            "type": "string",
            "description": "An additional ID that is used internally by the data-source.\nQuite often such IDs are used by data-sources to generate URLs to\ntheir records.\n",
            "example": "33"
          },
          "outlink": {
            "type": "string",
            "description": "An external URL provided by the data-source for the record.\n",
            "example": "http://www.catalogueoflife.org/annual-checklist/2019/details/species/id/d9ac988f149a3d2822d71c673be09317"
          },
          "entryDate": {
            "type": "string",
            "description": "A date when a record was harvested to gnames. It follows a\npattern 'YYYY-MM-DD'.\n",
            "example": "2020-06-30T00:00:00.000Z"
          },
          "matchedName": {
            "type": "string",
            "description": "A verbatim scientfic name matched to the input.",
            "example": "Pomatomus saltator (Linnaeus, 1766)"
          },
          "matchedCardinality": {
            "type": "integer",
            "description": "A cardinality value of the matched name. Binomial names\nhave cardinality 2, uninomials have cardinalty 1 etc.\nCardinality 0 means we cannot determine cardinality of a string.\n",
            "example": 2
          },
          "matchedCanonicalSimple": {
            "type": "string",
            "description": "The most normalized canonical form of a scientific name. It\ndoes not contain infraspecific ranks, hybrid signs for named\nhybrids, authors or years. This canonical form is the best for\nmatching names.\n",
            "example": "Pomatomus saltator"
          },
          "matchedCanonicalFull": {
            "type": "string",
            "description": "A less normalized canonical form of the matched name \nwith more details. This canonical form is better for\npresentation and creating matching scores.\n",
            "example": "Pomatomus saltator"
          },
          "currentRecordId": {
            "type": "string",
            "description": "If the data-source allows taxonomic resolution of a name,\n`currentRecordId` will contain the data-source record ID of\nthe currently accepted name for the matched taxon. \n",
            "example": "TX543"
          },
          "currentName": {
            "type": "string",
            "description": "The currently accepted name for the taxon according to the\ndata-source.\n",
            "example": "Pomatomus saltatrix (Linnaeus, 1766)"
          },
          "currentCardinality": {
            "type": "integer",
            "description": "Cardinality of the currently accepted name.\n",
            "example": 2
          },
          "currentCanonicalSimple": {
            "type": "string",
            "description": "The most normalized canonical form of the currently\naccepted scientific name.\n",
            "example": "Pomatomus saltatrix"
          },
          "currentCanonicalFull": {
            "type": "string",
            "description": "A less normalized canonical form of the currently accepted\nscientific name.\n",
            "example": "Pomatomus saltatrix"
          },
          "isSynonym": {
            "type": "boolean",
            "description": "A flag, that is true if the data-source regards matched name as\nan any kind of synonym to the currently accepted name.\n",
            "example": true
          },
          "classificationPath": {
            "type": "string",
            "description": "A classification path for the matched taxon provided by \nthe data-source.\n",
            "example": "Animalia|Chordata|Actinopterygii|Perciformes|Pomatomidae|Pomatomus|Pomatomus saltatrix"
          },
          "classificationRanks": {
            "type": "string",
            "description": "The ranks of the `classificationPath` entries.",
            "example": "kingdom|phylum|class|order|family|genus|species"
          },
          "editDistance": {
            "type": "integer",
            "description": "Edit distance according to Levenshtein algorithm\nin case of fuzzy matching. Exact matches would have `editDistance`\nat 0.\n",
            "example": 1
          },
          "editDistanceStem": {
            "type": "integer",
            "description": "Edit distance according to Levenshtein algorithm between\nstemmed versions of canonical forms of input name and matched\nname.\n\nStemmed versions are the most normalized forms of\nscientific names with stripped suffixes and transformation of\nsome characters (v->u, j->i). They are not provided by the API,\nbut can be obtained with `gnparser` app.\n",
            "example": 1
          },
          "matchType": {
            "type": "string",
            "description": "A category that describes the matching type between the input\nname-string and the matched name from the data-source. The\ncategories are\n- `NoMatch`\n- `Exact`\n- `Fuzzy`\n- `PartialExact`\n- `PartialFuzzy`\n",
            "example": "Fuzzy"
          }
        },
        "description": "A successsful match of input name-string to a record in a data-source.\nResultData with the highest score appears as a best match.\nResultData from a preferred data-sources are aggregated into\npreferredResults array.\n\nScoring takes the following into account (sorted from the highest\nimpact to the least)\n- infraspecific rank (`Aus bus var. cus` vs `Aus bus f. cus`)\n- fuzzy matching edit distance (less is better)\n- authorship matching\n- accepted name vs synonyms (accepted name wins)\n"
      }
    }
  }
}